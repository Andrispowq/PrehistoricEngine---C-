# PREHISTORIC ENGINE WORLD FILE #

# Usage: # means comment, but make sure to add a space after the hash
# First you have to specify the model and texture loading directory, where your models and texture are located. The locations of the textures and models are relative
# to this location, eg.: if texture directory is res/textures/, and you load a texture from pbr/tex_DIF.png, it will load it from res/textures/pbr/tex_DIF.png
# Make sure not to have double slashes, have it only after the directory or before every texture!
# After model and texture loading, you can create a material:
#	- materials.add <matname>						creates a new material
#	- material.<matname>.<type> <name> <value>		adds a new component to <matname> texture of <type>, with name <name> and value <value>, eg.:
#		material.sphere.vec3 colour 1,0.3,0.2 adds a vec3 component to material 'sphere' with the value (1, 0.3, 0.2), and name 'colour'
# After this stage, you can create the GameObjects, the building blocks of the scene. Everything is a GameObject, a GUI element, a particle system, and a character
# Creation:
#	- world.object <name> <position> <rotation> <scale>
#	This line will create a new object called 'name', at position 'position', with a rotation 'rotation', and scale 'scale'. You don't have to give it a position, rotation
#	or scale, but you cannot add just a rotation, just a rotation and scale, or just a scale. Note that the rotation is given as Euclidian rotation, so 1 rotation value per axis
#	and it is given in degrees, not radians, eg.: (60, -30, 70) will rotate the model 60 degrees on the X axis, -30 degrees on the Y axis, and 70 degrees on the Z axis.
#	The engine supports GameObject hierarchy trees, which means that you can have GameObject inheritance. Example:
#	- world.object.game.particleSystem particle 0,0,0
#	This line creates a GameObject called 'particle', which is a child object of 'particleSystem', which is a child of 'game'. Note that the position (0, 0, 0) is relative to it's parent's position
#	and if the parent has a parent which in this example has, and it's called 'game' it's position is also relative to it's parent's position. This requires that 'game'
#	is declared first, then 'particleSystem', but indicating that it's a child of 'game', and then 'particle' can be created.
# After that, you can add various components to the GameObjects in order to add functionality to them. The usage:
#	- object.<name>.component <compName> <values...>
#	This line will add a component of type <compName> with the name <compName> to GameObject called <name>. Note, that if this object is part of an inheritance tree,
#	you have to write out the whole inheritance tree, from the top. The <values...> is the parameters of the component we wish to add, like in the case of Renderer,
#	<values...> will be the model we want to renderer, the material applied to the model and a shader, which does not need to be created in this file, it's generated by the engine

# CONFIGURATION
world.name newWorld

# DIRECTORIES
directories.models res/models/
directories.textures res/textures/

# MODELS/TEXTURE TO LOAD
models.load cubeModel cube.obj counter-clockwise

models.dispatch

# CREATING MATERIALS FROM TEXTURES AND OTHER DATA
materials.add mat_plane
materials.mat_plane.vec3 colour 0.3,0.3,0.3
materials.mat_plane.vec4 mrot 0,0.6,1,0
materials.mat_plane.float emission 0

materials.add mat_cube
materials.mat_cube.vec3 colour 0.4,0.4,0.4
materials.mat_cube.vec4 mrot 0.2,0.3,1,0
materials.mat_cube.float emission 0

materials.add mat_light
materials.mat_light.vec3 colour 1,0.65,0.35
materials.mat_light.vec4 mrot 0,1,1,0
materials.mat_light.float emission 10

# GAMEOBJECT CREATION
# You can specify position, rotation, and scale, but only in this order, and you cannot have rotation or scale specified without position and scale without position and rotatino
root.object plane 0,-5,0 0,0,0 20,1,20 //position, rotation, scaling
root.object cube 0,0,0 0,0,0 1.3,1.3,1.3 //position, rotation, scaling
root.object light 20,40,20 0,0,0 1,1,1 //position, rotation, scaling

# COMPONENT ADDITION
object.plane.component Renderer cubeModel,pbr,mat_plane
object.cube.component Renderer cubeModel,pbr,mat_cube

object.light.component Renderer cubeModel,pbr,mat_light
object.light.component Light 1,0.65,0.35;10;50